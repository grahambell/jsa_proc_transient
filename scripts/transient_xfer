#!/usr/bin/env python2

from __future__ import absolute_import, division, print_function

import logging
import os
import re
import sys

from jsa_proc.custom.transfer import CustomJobTransfer


program_name = os.path.basename(sys.argv[0])
logger = logging.getLogger(program_name)


class TransientTransfer(CustomJobTransfer):
    def __init__(self, **kwargs):
        """
        Constructor for transient survey transfer script class.
        """

        super(TransientTransfer, self).__init__(
            vos_base='vos:jcmt-variability',
            **kwargs)

    def determine_vos_directory(self, transdir, filename):
        """
        Determine in which subdirectory of our VO-space a given file
        should be stored.

        :param transdir: directory in which file is located.
        :param filename: the name of the file.
        """

        # Do not store PNG previews.
        if filename.endswith('.png'):
            return None

        # Assume suffix 'images' initially.
        suffix = 'images'
        is_cal = False

        m = re.match(
            '^([-_A-Z0-9]+)_[0-9]{8}_[0-9]{5}_[48]50_([EGH])([AKR][0-9]+)[._]',
            filename)

        if not m:
            # Try alternate (multi-observation) file pattern.
            m = re.match(
                '^([-_A-Z0-9]+)_[48]50_([EGH])([AKR][0-9]+)_',
                filename)

            # Assume all files matching this pattern should
            # go in the _cal directory.
            is_cal = True

        if not m:
            raise Exception(
                'Could not extract source name and reduction type '
                'from file name "{}"'.format(filename))

        (source, survey, reductiontype) = m.groups()

        for part in ['_cal', '_match', '_cull']:
            if is_cal or part in filename:
                suffix = suffix + '_cal'
                break

        directory = None
        subdirectory = None
        if 'lightcurve' in filename:
            subdirectory = 'lightcurves'

        if survey == 'E':
            survey_dir = 'EAO'
        elif survey == 'G':
            survey_dir = 'GBS/results'
        elif survey == 'H':
            directory = '{}/{}/M17BP054/{}_{}'.format(
                'EAO', source, reductiontype, suffix)
        else:
            raise Exception('Unrecognised survey code {}'.format(survey))

        if directory is None:
            directory = '{}/{}/{}_{}'.format(survey_dir, source, reductiontype, suffix)

        if subdirectory is not None:
            directory = '/'.join([directory, subdirectory])

        return directory


if __name__ == '__main__':
    TransientTransfer(program_name=program_name).run()
