#!/usr/bin/env python3

from __future__ import absolute_import, division, print_function

import logging
import os
import shutil
import re
import subprocess
import sys

from docopt import docopt

# Add relative library directory to path.
sys.path.append(
    os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])), 'lib'))

from jsa_proc.custom.run import CustomJobRun
from jsa_proc_transient.dr import transient_analysis


program_name = os.path.basename(sys.argv[0])
logger = logging.getLogger(program_name)

# Describe extra parameters used by this script.
usage_extra = """
Usage:
    transient_run <reduction_type> [--no-450-cat] [--as-ref-cat] [--dimmconfig850 <config>] [--dimmconfig450 <config>] [--dra <offset>] [--ddec <offset>]

Options:
    --dimmconfig850 <config>  Dimmconfig file to use for 850um reduction
    --dimmconfig450 <config>  Dimmconfig file to use for 450um reduction
    --dra <offset>            Offset in RA (arcseconds)
    --ddec <offset>           Offset in Declination (arcseconds)
"""


class TransientRun(CustomJobRun):
    def run_processing(self, inputs, transdir, id_='unknown', parameters=[]):
        """
        Function to launch data processing.

        :param inputs: list of input file names
        :param transdir: target output directory
        :param id: job identifier
        """

        args = docopt(usage_extra, argv=parameters)


        # Send all output to STDERR (so that jsawrapdr collects it).
        os.dup2(sys.stderr.fileno(), sys.stdout.fileno())

        outputs = transient_analysis(
            inputfiles=inputs,
            reductiontype=args['<reduction_type>'],
            no_450_cat=args['--no-450-cat'],
            as_ref_cat=args['--as-ref-cat'],
            dimmconfig_850=args['--dimmconfig850'],
            dimmconfig_450=args['--dimmconfig450'],
            fixed_dra=args['--dra'],
            fixed_ddec=args['--ddec'])

        for filename in outputs:
            (base_name, extension) = os.path.splitext(filename)

            if extension == '.sdf':
                logger.info('Storing SDF file "%s"', filename)
                filename_edited = re.sub(
                    '_cal$', '', base_name) + '.sdf'
                filename_trans = os.path.join(transdir, filename_edited)
                shutil.copyfile(filename, filename_trans)
                subprocess.check_call(
                    [
                        '/bin/gzip',
                        '--best',
                        filename_trans,
                    ],
                    shell=False)

            elif extension == '.txt':
                logger.info('Storing text file "%s"', filename)
                shutil.copy(filename, transdir)

            elif extension == '.png':
                logger.info('Storing preview image "%s"', filename)
                shutil.copy(filename, transdir)

            elif extension == '.FIT':
                filename_edited = re.sub(
                    '_crop.*', '_cat', base_name) + '.fits'
                logger.info('Storing FITS file "%s" as "%s"',
                            filename, filename_edited)
                shutil.copyfile(
                    filename, os.path.join(transdir, filename_edited))

            else:
                raise Exception('Unexpected output file "{}"'.format(filename))


if __name__ == '__main__':
    TransientRun(program_name=program_name).run()
