#!/usr/bin/env python3

from __future__ import absolute_import, division, print_function

import logging
import os
import shutil
import re
import subprocess
import sys

# Add relative library directory to path.
sys.path.append(
    os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])), 'lib'))

from jsa_proc.custom.run import CustomJobRun
from jsa_proc_transient.dr import transient_analysis


program_name = os.path.basename(sys.argv[0])
logger = logging.getLogger(program_name)


class TransientRun(CustomJobRun):
    def run_processing(self, inputs, transdir, id_='unknown', parameters=[]):
        """
        Function to launch data processing.

        :param inputs: list of input file names
        :param transdir: target output directory
        :param id: job identifier
        """

        if len(parameters) != 1:
            raise Exception('Expected one parameter: the reduction type')
        reductiontype = parameters[0]

        outputs = transient_analysis(inputs, reductiontype)

        for filename in outputs:
            (base_name, extension) = os.path.splitext(filename)

            if extension == '.sdf':
                logger.info('Storing SDF file "%s"', filename)
                filename_edited = re.sub(
                    '_cal$', '', base_name) + '.sdf'
                filename_trans = os.path.join(transdir, filename_edited)
                shutil.copyfile(filename, filename_trans)
                subprocess.check_call(
                    [
                        '/bin/gzip',
                        '--best',
                        filename_trans,
                    ],
                    shell=False)

            elif extension == '.txt':
                logger.info('Storing text file "%s"', filename)
                shutil.copy(filename, transdir)

            elif extension == '.FIT':
                filename_edited = re.sub(
                    '_crop.*', '_cat', base_name) + '.fits'
                logger.info('Storing FITS file "%s" as "%s"',
                            filename, filename_edited)
                shutil.copyfile(
                    filename, os.path.join(transdir, filename_edited))

            else:
                raise Exception('Unexpected output file "{}"'.format(filename))


if __name__ == '__main__':
    TransientRun(program_name=program_name).run()
