#!/usr/bin/env starperl

use JAC::Setup qw/omp sybase/;

use strict;
use warnings;

use Getopt::Long;
use File::Basename;
use Alien::Taco;

use JSA::Submission qw/
    %BAD_OBSIDSS %JUNK_OBSIDSS
    echo_messages find_observations
    log_message prepare_archive_db write_log_file/;
use JSA::Proc qw/add_jsa_proc_jobs create_obsinfo_hash/;
use OMP::Info::Obs;
use OMP::Constants qw/:obs/;

my ($ut, $dry_run, $gbs);
die 'Could not process command line options'
    unless GetOptions(
        'dry-run'   => \$dry_run,
        'ut=s'      => \$ut,
        'gbs'       => \$gbs,
    );

my (@projects, @reductions, $priority, %project_objects);

unless ($gbs) {
    @projects = qw/M16AL001/;
    @reductions = qw/R1 R2 R3 R4/;
    $priority = 100;
}
else {
    my $taco = new Alien::Taco(lang => 'python');
    $taco->import_module('jsa_proc_transient.gbs');
    my $gbs_objects = $taco->get_value('jsa_proc_transient.gbs.gbs_objects');

    my %project_objects = ();
    foreach my $object (values %$gbs_objects) {
        foreach my $proj_obs (@$object) {
            my ($project, $object) = @$proj_obs;
            $project_objects{$project} //= {};
            $project_objects{$project}->{$object} = 1;
        }
    }

    @projects = keys %project_objects;
    @reductions = qw/R1 R2/;
    $priority = -100;
}

my $task = 'lap-transient';
my $only_info = 0;

die 'UT date not specified' unless defined $ut;

echo_messages(1);

prepare_archive_db();

foreach my $project (@projects) {
    my ($mode, $grp) = find_observations(
        $ut, $project, $priority, 'transient_submit');

    if (scalar(@{$grp->obs}) == 0) {
        log_message("No observations were retrieved from the database.\n");
    }
    else {
        log_message(scalar(@{$grp->obs}) .
                    " observations were retrieved from the database.\n\n");

        my %groups;

        foreach my $obs ($grp->obs) {
            next if $obs->status == OMP__OBS_JUNK;

            my @files = ();
            my @obsinfo = ();

            for my $subsys ($obs->subsystems()) {
                my @all_obsidss = $subsys->obsidss;
                my $obsidss = $all_obsidss[0];

                die "Error determining an OBSIDSS for an observation"
                    unless defined $obsidss;

                next if exists $JUNK_OBSIDSS{$obsidss};

                my $subsyshdr = $subsys->hdrhash();
                my $object = $subsyshdr->{'OBJECT'};

                if (%project_objects) {
                    unless (exists $project_objects{$project}->{$object}) {
                        log_message("Skipping unwanted object $object.\n");
                        next;
                    }
                }


                push @obsinfo, create_obsinfo_hash($obs, $subsyshdr);

                push @files, map {basename($_)} $subsys->filename();
            }

            if (scalar @files) {
                foreach my $reduction (@reductions) {
                    my $tag = $task . "-" . $obs->obsid
                                    . "-" . $reduction;

                    foreach my $obsinfo (@obsinfo) {
                        $obsinfo->{'association'} = $tag;
                    }

                    $groups{$tag} = {
                        mode => 'obs',
                        task => $task,
                        drparams => $reduction,
                        files => \@files,
                        obsinfolist => \@obsinfo,
                    };
                }
            }
        }

        add_jsa_proc_jobs(\%groups, 'obs', $priority, $only_info, $dry_run);
    }
}

exit;
